<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/2000/REC-xhtml1-20000126/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<title>About CampusMap: About The Editor</title>
<meta http-equiv="content-type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" href="/about/style.css" />
</head>
<body>
<div id="top">
	<h1>About CampusMap</h1>
<!--#include virtual="/cgi-bin/menu.pl?editor"-->
</div>

<h2>About the Editor</h2>

<p>
	The editor is used to add paths (representing foot paths or roads) and
	locations (representing buildings or landmarks) to a base image.


</p>

<p>
	This is a screenshot of the editor in use. The base image is a greatly
	enlarged version of one of the UCSD campus maps. (The map used inside
	the editor is designed to be purely functional -- it's notably uglier
	than a different version of the same map that's used in the interface.)
	
	Many of the foot paths in the area have been entered, and you can see
	them going between locations, crossing each other, etc:

</p>

<img src="images/busy.png">

<p>
	Any base image may be used, so paths may be entered for any area. The
	only limitations on size manifest themselves in terms of speed.
	However, we have not encountered any size related speed problems after
	implementation of certain data storage and loading optimizations.

</p>

<p>
	Data is entered as a series of &quot;paths&quot;, which are nothing
	more than a series of points connected by lines. Each path is
	independent; they may cross, but nothing special happens when they do.

</p>

<p>
	Building locations are entered as points along the paths. They can
	either be edited directly in the editor, or loaded from from an
	external file.  Several notable attributes of a location are keywords
	and aliases.  Keywords can be used in the interface to search from a
	given location to the nearest keyword containing location (e.g. Parking
	lot or library).  Aliases are used as alternative names for a location
	(e.g. 140 Arbor Drive and Bachman Building). Searches for aliases
	resolve to the offical name in the interface.

</p>

<h2>Optimization/Data Processing</h2>

<p>
	The optimization/data processing aspect of the editor transforms the
	manipulatable data into a graph in a format optimized for use by the
	interface.

</p>

<p>
	Here is an example of the merging of paths into a graph.
</p>

<p>
	A single path made up of four points (with a location &quot;Here&quot;
	attached to one point):

</p>
<img src="images/path.png">

<p>
	A second path has been added (with a location &quot;There&quot;
	attached to a point), criss-crossing the first:

</p>
<img src="images/before.png">

<p>
	The same two paths have been compressed and have been turned into a
	planar graph: Each place two lines cross, a new point has been created
	to join the two lines (this can be suppressed when necessary, such as
	for bridges). The points are now nodes in a graph, connected by lines
	(vertices). Also, extraneous points that led nowhere were deleted.
	

</p>
<img src="images/after.png">

<p>
	The data can now be exported to a format readable by the online
	interface, which can calculate shortest paths, etc.

</p>

</body>
</html>
